class MinHeap:
    def __init__(self):
        self.heap = []
    def parent(self, index):
        return(index - 1) >> 1
    def left(self, index):
        return(index << 1) + 1
    def right(self, index):
        return(index << 1) + 2
    def build_min_heap(self, array):
        self.heap = array
        for i in range(self.parent(len(array)-1), -1, -1 ):
            self.heapify(i)

    def heapify(self, index):
        smallest = index
        left_index = self.left(index)
        right_index = self.right(index)

        if left_index < len(self.heap)  and self.heap[left_index] < self.heap[smallest]:
            smallest = left_index

        if right_index < len(self.heap) and self.heap[right_index] < self.heap[smallest]:
            smallest = right_index

        if smallest != index:
            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]
            self.heapify(smallest)

    def pop(self):
        if not self.heap:
            raise IndexError("pop from empty heap")
        root_value = self.heap[0]
        last_value = self.heap.pop() #remove the last element

        if self.heap:
            self.heap[0] = last_value
            self.heapify(0)

        return root_value

    def insert(self, value):
        self.heap.append(value)
        index = len(self.heap) - 1
        while index > 0 and self.heap[self.parent(index)] > self.heap[index]:
            self.heap[self.parent(index)], self.heap[index] = self.heap[index], self.heap[self.parent(index)]
            index = self.parent(index)

    def __str__(self):
        return str(self.heap)

#example usage
if __name__ == "__main__":
    #create a MiHeap instance
    min_heap = MinHeap()

    #build the heap from an array
    initial_array = [5, 3, 8, 4, 1, 2]
    min_heap.build_min_heap(initial_array)
    print("Heap after building from array:", min_heap)

    #insert a new element
    min_heap.insert(0)
    print("Heap after inserting 0:", min_heap)

    #pop all elements
    while len(min_heap.heap) > 0:
        print("Popped value;", min_heap.pop())
        print("Current Heap:", min_heap)
